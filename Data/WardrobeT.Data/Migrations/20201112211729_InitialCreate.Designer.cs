// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WardrobeT.Data;

namespace WardrobeT.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201112211729_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Wardrobe.Data.TypeOfCloath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanBeUsedAlone")
                        .HasColumnType("bit");

                    b.Property<bool>("Official")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfCloath");

                    b.HasData(
                        new
                        {
                            Id = "3a8866fb-997e-4c77-87d9-d0eca73363f1",
                            CanBeUsedAlone = true,
                            Official = true,
                            Type = "Dress"
                        },
                        new
                        {
                            Id = "f53cdb69-a190-4993-b157-3a494e2cbcfd",
                            CanBeUsedAlone = true,
                            Official = false,
                            Type = "Dress"
                        },
                        new
                        {
                            Id = "7449b4b0-1e41-48ce-b43d-49697ea07938",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Jacket"
                        },
                        new
                        {
                            Id = "f9fc1f5d-5153-4f70-aa1f-59953163f14d",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Jacket"
                        },
                        new
                        {
                            Id = "c21308ae-f04c-47b4-b8b1-67681961cd4a",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Knit Shirt"
                        },
                        new
                        {
                            Id = "d20f815e-8dc1-4dfe-980e-a9930bbebfc6",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Knit Shirt"
                        },
                        new
                        {
                            Id = "2c1710a0-7428-41d6-9cd4-dd1ef4cc7399",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Shirt"
                        },
                        new
                        {
                            Id = "4d673eb0-efe5-4c69-b601-527421e3859a",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Shirt"
                        },
                        new
                        {
                            Id = "f360d7cc-21a5-4010-87ce-3c2ba2cdbe96",
                            CanBeUsedAlone = true,
                            Official = true,
                            Type = "Suit"
                        },
                        new
                        {
                            Id = "e2dc29ee-79ce-4848-af08-f75f0b2eff5b",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Blouse"
                        },
                        new
                        {
                            Id = "3ada8a34-3183-4644-830e-ba90904c1805",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Blouse"
                        },
                        new
                        {
                            Id = "88c9fba5-2f9a-43dc-b9c5-8258d287b89e",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Sport Shirt"
                        },
                        new
                        {
                            Id = "ea8e7ef2-4d0d-422e-a3bb-84361b13680e",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Sport Shirt"
                        },
                        new
                        {
                            Id = "bf1aaa36-41ba-452e-8ed3-b5f88ef4d0ce",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Skirt"
                        },
                        new
                        {
                            Id = "2d7cf21f-d3ae-4b9d-b35b-bc3298484648",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Skirt"
                        },
                        new
                        {
                            Id = "007b8a16-372f-45ca-a82f-7605d339c0a3",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Blazer"
                        },
                        new
                        {
                            Id = "faac4b40-c810-47f4-8832-353271532fd2",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Blazer"
                        },
                        new
                        {
                            Id = "3b5419f4-7a3d-42e7-8e35-010812c1ffec",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Jeans"
                        },
                        new
                        {
                            Id = "61e1646c-8738-4ff3-91eb-08b68f220e1b",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Jeans"
                        },
                        new
                        {
                            Id = "1a53e608-7244-4e0d-a543-c7c01a34dbb1",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Tie"
                        },
                        new
                        {
                            Id = "ffdba6a7-9d85-447e-9fa9-54d1766fed08",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Tie"
                        },
                        new
                        {
                            Id = "90c1b1b6-b21c-4c8d-9460-d619b69653d8",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Tunic"
                        },
                        new
                        {
                            Id = "d52ad638-13f1-43db-aff2-347b6247d24e",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Tunic"
                        },
                        new
                        {
                            Id = "da3aca41-0b56-491b-8078-224fadb6ee9d",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Vest"
                        },
                        new
                        {
                            Id = "f529c4a7-dc16-498f-932a-558a178aab35",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Vest"
                        },
                        new
                        {
                            Id = "304679d5-50c6-46c5-94c5-7fb8e10d35d3",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Short"
                        },
                        new
                        {
                            Id = "53cf539b-ead7-411a-861d-3916f14e0890",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Short"
                        },
                        new
                        {
                            Id = "daf451c2-cb72-4b46-b9f5-9419d117629d",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Bowtie"
                        },
                        new
                        {
                            Id = "3f2acfdb-c28f-4def-a150-024f3ae0a22b",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Bowtie"
                        },
                        new
                        {
                            Id = "070ed7f5-5694-4e54-9a36-1484c585cd94",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Coat"
                        },
                        new
                        {
                            Id = "1625daaf-214e-4bb3-a66a-1cc65642c111",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Slacks"
                        },
                        new
                        {
                            Id = "6941ed15-f999-4c33-9314-58f730bff19c",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Slacks"
                        },
                        new
                        {
                            Id = "25be51ef-1c32-482d-90b5-a9de9d708cc2",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Leggins"
                        },
                        new
                        {
                            Id = "a4817149-2dde-410c-88cf-de0c1dabe979",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "Turtle Neck"
                        },
                        new
                        {
                            Id = "007a0b56-000e-4068-91d5-5e9fe6554f0b",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "Turtle Neck"
                        },
                        new
                        {
                            Id = "7d278af6-288f-4fbd-ac30-16b6582a6821",
                            CanBeUsedAlone = false,
                            Official = true,
                            Type = "T-Shirt"
                        },
                        new
                        {
                            Id = "e14812e3-c94f-4c93-82be-865baffcf42f",
                            CanBeUsedAlone = false,
                            Official = false,
                            Type = "T-Shirt"
                        });
                });

            modelBuilder.Entity("WardrobeT.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WardrobeT.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WardrobeT.Data.Models.Cloath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Cloaths");
                });

            modelBuilder.Entity("WardrobeT.Data.Models.Friends", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendRequesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequstedPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendRequesterId");

                    b.HasIndex("RequstedPersonId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("WardrobeT.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WardrobeT.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WardrobeT.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WardrobeT.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WardrobeT.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WardrobeT.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WardrobeT.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WardrobeT.Data.Models.Cloath", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wardrobe.Data.TypeOfCloath", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WardrobeT.Data.Models.Friends", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "FriendRequester")
                        .WithMany()
                        .HasForeignKey("FriendRequesterId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "RequstedPerson")
                        .WithMany()
                        .HasForeignKey("RequstedPersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
